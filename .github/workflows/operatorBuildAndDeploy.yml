name: Cass Operator Build & Deploy
on:
  push:
    branches:
      - master
      - "1.4.x"
  pull_request:
    branches: [ master ]
jobs:
  build_operator_docker:
    name: Build Cass Operator Docker Image
    runs-on: ubuntu-latest
    env:
      GOPATH: /home/runner/go
      GOROOT: /usr/local/go1.13
    steps:
      - name: Print Skopeo cli version
        run: |
          echo "Skopeo cli version"
          skopeo --version
      - uses: actions/checkout@v2
        if: github.event_name == 'pull_request'
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/checkout@v2
        if: github.event_name != 'pull_request'
      - name: Set up Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
      - name: Install Mage
        run: |
          cd /tmp
          wget https://github.com/magefile/mage/releases/download/v1.9.0/mage_1.9.0_Linux-64bit.tar.gz
          tar -xvf mage_1.9.0_Linux-64bit.tar.gz
          mkdir -p $GOPATH/bin
          mv mage $GOPATH/bin/mage
          sudo chmod +x $GOPATH/bin/mage
      - name: Test Sdk Generate
        run: |
          export PATH=$GOROOT/bin:$GOPATH/bin:$PATH
          mage operator:testSdkGenerate
      - name: Test Client Generate
        run: |
          export PATH=$GOROOT/bin:$GOPATH/bin:$PATH
          mage operator:testGenerateClient
      - name: Unit Tests
        run: |
          export PATH=$GOROOT/bin:$GOPATH/bin:$PATH
          mage operator:testGo
      - name: Login to GitHub Package Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u "${{ github.actor }}" --password-stdin
      - name: Login to ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ECR_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ECR_SECRET }}
        run: $(aws ecr get-login --no-include-email --region us-east-1)
      - name: Setup Buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v3
      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Build and Push Docker
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == 'datastax/cass-operator'
        env:
          ECR_REPO: ${{ secrets.ECR_REPO }}
          PR_REF: ${{ github.event.pull_request.head.ref }}
        run: |
          if [ "${GITHUB_EVENT_NAME}" == "pull_request" ]; then
            export MO_BRANCH=${PR_REF}
          else
            export MO_BRANCH="master"
          fi

          export PATH=$GOROOT/bin:$GOPATH/bin:$PATH
          GITHUB_REPO_URL="https://github.com/${{ github.repository }}"

          VERSION="$(mage operator:printVersion)"
          FULL_VERSION="$(mage operator:printFullVersion)"
          VERSION_STAMP="${{ github.repository }}:${FULL_VERSION}"

          ECR_REPOSITORY="${ECR_REPO}/datastax/cass-operator"
          GH_REPOSITORY="docker.pkg.github.com/${{ github.repository_owner }}/cass-operator/operator"

          ECR_TAGS=()
          ECR_UBI_TAGS=()
          GH_TAGS=()
          GH_UBI_TAGS=()
          GH_ARM64_TAGS=()

          for t in "${FULL_VERSION}" "${GITHUB_SHA}" "latest"; do
            ECR_TAGS+=(--tag "${ECR_REPOSITORY}:${t}")
            ECR_UBI_TAGS+=(--tag "${ECR_REPOSITORY}:${t}-ubi")

            GH_TAGS+=(--tag "${GH_REPOSITORY}:${t}")
            GH_UBI_TAGS+=(--tag "${GH_REPOSITORY}:${t}-ubi")
            GH_ARM64_TAGS+=(--tag "${GH_REPOSITORY}:${t}-arm64")
          done

          LABELS=(
            --label "org.label-schema.schema-version=1.0"
            --label "org.label-schema.vcs-ref=$GITHUB_SHA"
            --label "org.label-schema.vcs-url=$GITHUB_REPO_URL"
            --label "org.label-schema.version=$VERSION"
          )

          COMMON_ARGS=(
            "${LABELS[@]}"
            --file operator/docker/base/Dockerfile
            --cache-from "type=local,src=/tmp/.buildx-cache"
            --cache-to "type=local,dest=/tmp/.buildx-cache"
          )

          STANDARD_ARGS=(
            "${COMMON_ARGS[@]}"
            --label "release=${VERSION_STAMP}"
            --build-arg "VERSION_STAMP=${VERSION_STAMP}"
            --target cass-operator
          )

          UBI_ARGS=(
            "${COMMON_ARGS[@]}"
            --label "release=${VERSION_STAMP}-ubi"
            --build-arg "VERSION_STAMP=${VERSION_STAMP}-ubi"
            --build-arg "BASE_OS=registry.access.redhat.com/ubi7/ubi-minimal:7.8"
            --target cass-operator-ubi
          )

          # Build and push standard images

          docker buildx build \
            --push \
            "${STANDARD_ARGS[@]}" \
            "${ECR_TAGS[@]}" \
            --platform linux/amd64,linux/arm64 \
            .


          # Build and push UBI images

          docker buildx build \
            --push \
            "${UBI_ARGS[@]}" \
            "${ECR_UBI_TAGS[@]}" \
            --platform linux/amd64 \
            .


          # Workaround for GH packages

          docker buildx build \
            --load \
            "${STANDARD_ARGS[@]}" \
            "${GH_TAGS[@]}" \
            --platform linux/amd64 \
            .

          docker buildx build \
            --load \
            "${STANDARD_ARGS[@]}" \
            "${GH_ARM64_TAGS[@]}" \
            --platform linux/arm64 \
            .

          docker buildx build \
            --load \
            "${UBI_ARGS[@]}" \
            "${GH_UBI_TAGS[@]}" \
            --platform linux/amd64 \
            .

          TAGS_TO_PUSH=("${GH_ARM64_TAGS[@]}" "${GH_TAGS[@]}" "${GH_UBI_TAGS[@]}")
          echo "Pushing tags: " "${TAGS_TO_PUSH[@]}"

          # Note: Every even index of TAGS_TO_PUSH will be the string '--tag'
          #       so we skip over those while looping.

          for ((x=1; x<${#TAGS_TO_PUSH[@]}; x=x+2)); do
            docker push "${TAGS_TO_PUSH[x]}"
          done
